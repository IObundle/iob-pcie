//This file was generated by script mkregs.py



//write registers
`IOB_WIRE(_TXCHNL_DATA_en, 1)
`IOB_WIRE2WIRE((valid & (|wstrb[0+:4]) & (address == 0)), _TXCHNL_DATA_en)
`IOB_WIRE(_TXCHNL_DATA_wdata, 32)
`IOB_WIRE2WIRE(wdata[0+:32], _TXCHNL_DATA_wdata)

`IOB_WIRE(_TXCHNL_LEN_en, 1)
`IOB_WIRE2WIRE((valid & (|wstrb[0+:4]) & (address == 1)), _TXCHNL_LEN_en)
`IOB_WIRE(_TXCHNL_LEN_wdata, 32)
`IOB_WIRE2WIRE(wdata[0+:32], _TXCHNL_LEN_wdata)



//read register logic
`IOB_VAR(rdata_int, DATA_W)
`IOB_WIRE(address_reg, ADDR_W)
iob_reg #(ADDR_W, 0) addr_reg (clk, rst, 1'b0, valid, address, address_reg);
`IOB_VAR2WIRE(rdata_int, rdata)

`IOB_WIRE(_RXCHNL_DATA_rdata, 32)
`IOB_WIRE(_RXCHNL_LEN_rdata, 32)

always @* begin
   case(address_reg)
        0: rdata_int = {_RXCHNL_DATA_rdata};
        1: rdata_int = {_RXCHNL_LEN_rdata};
     default: rdata_int = 1'b0;
   endcase
end
   
  `IOB_VAR(ready_next,1)
  
   `IOB_COMB begin
      if (address == `_TXCHNL_DATA_ADDR)
	ready_next = tx_wr;
      else if (address == `_RXCHNL_DATA_ADDR)
	ready_next = rx_ren;
      else
	ready_next = valid;
   end 
   
   
   iob_reg #(1, 0) read_en_reg (clk, rst, 1'b0, 1'b1,ready_next, ready);
